#Part 1 (link: https://github.com/Ada-Developers-Academy/textbook-curriculum/blob/master/01-ruby-fundamentals/exercises/data-transformation-worksheet.md)
# Iterating through Arrays using Enumerable

# 1. convert length of strings in an array to integer and store resulting array of integer in string_lengths
my_strings = ["diapers", "bottle", "formulas", "stroller", "book", "toy", "car"]

def length_converter(array)
  string_lengths = array.map do |item|
    item.length
  end

  return string_lengths
end

puts "1. Using map method, the string_lengths array is: \n#{length_converter(my_strings)}"

# Personal reference 1a. Another approach to number 1 solution is below:
# my_strings.each { |baby_item| string_lengths << baby_item.length }

# 2. Convert number in an integer array into string object "even" "odd" and create a new array that contains those strings

my_nums = [1, 2, 3, 4, 5]

def integer_converter(array)
  string = array.map do |num|
    if (num % 2 == 0)
      "even"
    else
      "odd"
    end
  end
  return string
end

puts "2. The new String array contains the following elements: \n#{integer_converter(my_nums)}"

# 3. Remove string over 4 letters from the original my_strings array
my_strings = ["diapers", "bottle", "formulas", "stroller", "book", "toy", "car"]

def find_shorter_words(array)
  new_array = array.select { |item| item.length <= 4 }
  return new_array
end

puts "3. Used .select method to create a new array that contains words with less then 4 letters: \n#{find_shorter_words(my_strings)}"

#Personal referece 3a. Another approach to n 3
# my_strings.delete_if { |baby_item| baby_item.length > 4 }
# puts my_strings

#4.Return a string that has the longest length in my_strings

my_strings = ["diapers", "bottle", "formulas", "bath tub", "bassinet", "stroller", "book", "toy", "car"]

def find_longest_word(array)
  longest_word = array.max { |a, b| a.length <=> b.length }
  return longest_word
end

puts "4. The longest word in my_strings is '#{find_longest_word(my_strings)}'"

#############Transforming Arrays into Hashes#####################

#1. Given names array, return an array of hashes
names = ["Grumpy", "Happy", "Sleepy", "Bashful", "Sneezy", "Dopey", "Doc"]

def return_arry_hashes(array)
  n = array.length
  new_names_array = (0..n - 1).map do |i|
    {
      name: array[i],
      id: i + 1,
    }
  end
  return new_names_array
end

puts "1-Hash. This turns an array into an array of hashes: \n#{return_arry_hashes(names)}"

#2.Similar to 1 above except adding key specialty and values from the specialty array to the hash
names = ["Grumpy", "Happy", "Sleepy", "Bashful", "Sneezy", "Dopey", "Doc"]
specialties = ["grump", "smile", "nap", "blush", "sneeze", "goof", "contemplate"]

def return_name_spe_id_hash(array_1, array_2)
  n = array_1.length
  new_names_array = (0..n - 1).map do |i|
    {
      name: array_1[i],
      specialties: array_2[i],
      id: i + 1,
    }
  end

  return new_names_array
end

puts "2-Hash. This turns array 'names' into an array of hashes with added specialty key and values: \n#{return_name_spe_id_hash(names, specialties)}"

#3.Given two arrays of strings, write code that returns an array of arrays. Each element in the larger array should have two elements: the first element is the name, and the second element is the specialty.

names = ["Grumpy", "Happy", "Sleepy", "Bashful", "Sneezy", "Dopey", "Doc"]
specialties = ["grump", "smile", "nap", "blush", "sneeze", "goof", "contemplate"]

def return_array(array_1, array_2)
  n = array_1.length
  name_spec_array = (0..n - 1).map do |i|
    [array_1[i], array_2[i]]
  end

  return name_spec_array
end

puts "3-Hash. This returns an array of arrays given two arrays of strings: \n#{return_array(names, specialties)}"

#BONUS: use .zip method to combine the elements of two arrays
names = ["Grumpy", "Happy", "Sleepy", "Bashful", "Sneezy", "Dopey", "Doc"]
specialties = ["grump", "smile", "nap", "blush", "sneeze", "goof", "contemplate"]

combined_array = names.zip(specialties)

puts "Another soluation to problem 3 under Transforming Arrays into Hashes also returns: \n#{combined_array}"

#Conclusion
puts "1. What went well?"
puts "Having done the Part 1 of the transformation with each method make changing the solution to Enumerable methods much easier. In addition, I really like how the Enumerable methods help shorten the code"

puts "2. What was challenging?"
puts "problem 4 where we need to find the longest word was challenging to me as the method (i.e. inject) that I tried initially returned the last longest word not the first one. It took me a while to find the right method. Problem 2 was also challenging since I have not encountered an example of if statement being used as part of enumerable methods learned in class"

puts "3. Which problems were easier? Why?"
puts "The first problem was easier as it's very simple to convert based on what we have learned in class. Problem 2 & 3 under section Transforming Arrays into Hashes become easier after I have solved the 1st problem and can use similar code block with some minor twix"

puts "4. What strategies made the problems easier?"
puts "Going through the Enumerable jigsaw activity in class was very helpful for me to learn about new methods to apply to this excercise. In addition, going through the map method to create a hash in class was also very helpful in completing the transformating Arrays to Hashes section"

puts "5. What are some differences between arrays and hashes that you learned?"
puts "An array is an ordered collection of data while a hash is an unorder collection of data with key: value pair"
